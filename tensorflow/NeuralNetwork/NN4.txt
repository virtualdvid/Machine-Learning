{"num_frames":2,"frame":1,"objs":[{"type":"Text","guid":"f5fdd93e-f082-a73e-b0e5-d1bb6f05534d","properties":{"1":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"1    0    1","p":{"x":360,"y":326.25},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"1    0    1","p":{"x":360,"y":326.25},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    0    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"f5fdd93e-f082-a73e-b0e5-d1bb6f05534d","properties":{"1":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"1    0    1","p":{"x":360,"y":326.25},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"1    0    1","p":{"x":360,"y":326.25},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    0    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"399dc118-4542-e823-6ec5-d3ee4df6abe9","properties":{"1":{"t":"Logic Gates","p":{"x":371.25,"y":382.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"Logic Gates","p":{"x":337.5,"y":67.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"Logic Gates","p":{"x":337.5,"y":67.5},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["Logic Gates"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"aecaf856-8a94-69ae-14c3-706f6992aab7","properties":{"1":{"t":"Logic Gates","p":{"x":371.25,"y":382.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"Logic Gates","p":{"x":337.5,"y":67.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"Logic Gates","p":{"x":337.5,"y":67.5},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["Logic Gates"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"73a7cfa4-2a37-0062-6e1d-e52aa8d8e9d6","properties":{"1":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"xor","p":{"x":765,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"xor","p":{"x":765,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["xor"],"cargs":[{}],"text_val":" = function xor(arg0, arg1) {\n  \"use strict\";\n  var name = 'xor';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"7ecd02c7-aebf-0ba0-00f3-7ad6a241ad57","properties":{"1":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"xor","p":{"x":765,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"xor","p":{"x":765,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["xor"],"cargs":[{}],"text_val":" = function xor(arg0, arg1) {\n  \"use strict\";\n  var name = 'xor';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"875e4147-5491-64c1-ecc1-cd6ff33c1946","properties":{"1":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"0    1    1","p":{"x":360,"y":393.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"0    1    1","p":{"x":360,"y":393.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    1    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"0af4ae65-85f2-83b8-2715-d176339ea847","properties":{"1":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"0    1    1","p":{"x":360,"y":393.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"0    1    1","p":{"x":360,"y":393.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    1    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"4ebb85d0-63ca-ac47-1803-4016d019b137","properties":{"1":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"1    1    0","p":{"x":360,"y":461.25},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"1    1    0","p":{"x":360,"y":461.25},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    1    1    1    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"d5e6e962-7372-4dc1-2c8b-69222a24b83c","properties":{"1":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"1    1    0","p":{"x":360,"y":461.25},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"1    1    0","p":{"x":360,"y":461.25},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    1    1    1    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"27e8e11f-5be2-86ff-7b6d-c8cef9203c5b","properties":{"1":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"0    0    0","p":{"x":360,"y":258.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"0    0    0","p":{"x":360,"y":258.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    0    0    0    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"87df85de-f01f-a35d-9983-e9877342afef","properties":{"1":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"0    0    0","p":{"x":360,"y":258.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"0    0    0","p":{"x":360,"y":258.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    0    0    0    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":247.5,"h":45}},{"type":"Text","guid":"83ab14da-3b73-55cb-a867-675a20c1f7df","properties":{"1":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"in","p":{"x":438.75,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"in","p":{"x":438.75,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["in"],"cargs":[{}],"text_val":" = in","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"8213b1e4-eea1-aa0c-e8ce-f20e5abc13c7","properties":{"1":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"in","p":{"x":438.75,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0},"3":{"t":"in","p":{"x":438.75,"y":168.75},"c":[0,0,0,1],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["in"],"cargs":[{}],"text_val":" = in","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"d3e46219-a847-1e65-2dfe-090d3c1019b5","properties":{"1":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"and","p":{"x":765,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"and","p":{"x":765,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["and"],"cargs":[{}],"text_val":" = function and(arg0, arg1) {\n  \"use strict\";\n  var name = 'and';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"a227f282-7c8e-fc5a-603c-f850d183b814","properties":{"1":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"and","p":{"x":765,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"and","p":{"x":765,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["and"],"cargs":[{}],"text_val":" = function and(arg0, arg1) {\n  \"use strict\";\n  var name = 'and';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"4d57813f-c43a-f9d7-02c2-8f96abc06b79","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1012.5,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1012.5,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"603c2e32-2bb8-38ce-a92b-f884cb08c8de","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1012.5,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1012.5,"y":168.75},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"068d49a1-b788-68f7-a416-02b8ad591ead","properties":{"1":{"t":"slide:w1","p":{"x":236.25,"y":1091.25},"c":[0,0,0,0],"w":1,"h":1,"r":0},"2":{"t":"slide:w1","p":{"x":236.25,"y":1091.25},"c":[0,0,0,1],"w":1,"h":1,"r":0},"3":{"t":"slide:w1","p":{"x":236.25,"y":1091.25},"c":[0,0,0,1],"w":1,"h":1,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"slide","args":["w1"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"248e9ee3-a5dd-f760-390e-a70b72960e8a","properties":{"1":{"t":"slide:w2","p":{"x":236.25,"y":1136.25},"c":[0,0,0,0],"w":1,"h":1,"r":0},"2":{"t":"slide:w2","p":{"x":236.25,"y":1136.25},"c":[0,0,0,1],"w":1,"h":1,"r":0},"3":{"t":"slide:w2","p":{"x":236.25,"y":1136.25},"c":[0,0,0,1],"w":1,"h":1,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"slide","args":["w2"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"c62131ad-8f6c-ee88-ca8f-24c814416b9c","properties":{"1":{"t":"slide:b","p":{"x":236.25,"y":1181.25},"c":[0,0,0,0],"w":1,"h":1,"r":0},"2":{"t":"slide:b","p":{"x":236.25,"y":1181.25},"c":[0,0,0,1],"w":1,"h":1,"r":0},"3":{"t":"slide:b","p":{"x":236.25,"y":1181.25},"c":[0,0,0,1],"w":1,"h":1,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"slide","args":["b"],"cargs":[{}],"text_val":" = b","near_mouse":false,"size":{"w":112.5,"h":45}},{"type":"Text","guid":"af81966d-d7b9-9f5f-ffdc-7f69ed535da5","properties":{"1":{"t":"e:surface(net(x1,x2)=sig(x1*w1 + x2*w2 + b))","p":{"x":236.25,"y":1226.25},"c":[0,0,0,0],"w":1,"h":1,"r":0},"2":{"t":"e:surface(net(x1,x2)=sig(x1*w1 + x2*w2 + b))","p":{"x":236.25,"y":1226.25},"c":[0,0,0,1],"w":1,"h":1,"r":0},"3":{"t":"e:surface(net(x1,x2)=sig(x1*w1 + x2*w2 + b))","p":{"x":236.25,"y":1226.25},"c":[0,0,0,1],"w":1,"h":1,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"e","args":["surface(net(x1,x2)=sig(x1*w1 + x2*w2 + b))"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":945,"h":45}},{"type":"Text","guid":"37bde72e-ac17-cb00-c88d-dd88e0c97199","properties":{"1":{"t":"e:scatter([[0,1,10],[10,1,0]],20)","p":{"x":236.25,"y":1271.25},"c":[231,76,60,0],"w":1,"h":1,"r":0},"2":{"t":"e:scatter([[0,1,10],[10,1,0]],20)","p":{"x":236.25,"y":1271.25},"c":[231,76,60,1],"w":1,"h":1,"r":0},"3":{"t":"e:scatter([[0,1,10],[10,1,0]],20)","p":{"x":236.25,"y":1271.25},"c":[231,76,60,1],"w":1,"h":1,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"e","args":["scatter([[0,1,10],[10,1,0]],20)"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":697.5,"h":45}},{"type":"Text","guid":"d7f5a033-5a12-54df-64c6-a6a5cb4955aa","properties":{"1":{"t":"e:scatter([[0,0,0],[10,0,10]],20)","p":{"x":236.25,"y":1316.25},"c":[41,128,185,0],"w":1,"h":1,"r":0},"2":{"t":"e:scatter([[0,0,0],[10,0,10]],20)","p":{"x":236.25,"y":1316.25},"c":[41,128,185,1],"w":1,"h":1,"r":0},"3":{"t":"e:scatter([[0,0,0],[10,0,10]],20)","p":{"x":236.25,"y":1316.25},"c":[41,128,185,1],"w":1,"h":1,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"e","args":["scatter([[0,0,0],[10,0,10]],20)"],"cargs":[{}],"text_val":"","near_mouse":false,"size":{"w":697.5,"h":45}},{"type":"Shape","guid":"d6a0dd1c-3b47-2e47-0ea1-f0389fd274b7","properties":{"1":{"c":[0,0,0,0],"path":[{"x":1170,"y":585},{"x":1170,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,1],"path":[{"x":708.75,"y":146.25},{"x":708.75,"y":506.25}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,1],"path":[{"x":708.75,"y":146.25},{"x":708.75,"y":506.25}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"f543311d-862b-cc9c-cb11-557e6ba418e0","properties":{"1":{"c":[0,0,0,0],"path":[{"x":742.5,"y":641.25},{"x":1867.5,"y":641.25}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,1],"path":[{"x":326.25,"y":202.5},{"x":933.75,"y":202.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,1],"path":[{"x":326.25,"y":202.5},{"x":933.75,"y":202.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"a0c1fb20-45c5-6e1e-c84d-f18e73db590d","properties":{"1":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"1e16472f-8e25-ad48-2a50-5a0450afb650","properties":{"1":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Text","guid":"b41fa125-c38c-2c97-ed41-71ff085afe02","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"48359abb-262b-7ed3-f0ce-10733f7b229f","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Shape","guid":"4d55b080-48f5-9240-db95-ece349d55baa","properties":{"1":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"7271597a-ecc1-3d7d-0c1a-4f34895592fb","properties":{"1":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Text","guid":"f5fdd93e-f082-a73e-b0e5-d1bb6f05534d","properties":{"1":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    0    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"f5fdd93e-f082-a73e-b0e5-d1bb6f05534d","properties":{"1":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"1    0    0    1    1","p":{"x":810,"y":765},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    0    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"73a7cfa4-2a37-0062-6e1d-e52aa8d8e9d6","properties":{"1":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["xor"],"cargs":[{}],"text_val":" = function xor(arg0, arg1) {\n  \"use strict\";\n  var name = 'xor';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"7ecd02c7-aebf-0ba0-00f3-7ad6a241ad57","properties":{"1":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"xor","p":{"x":1665,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["xor"],"cargs":[{}],"text_val":" = function xor(arg0, arg1) {\n  \"use strict\";\n  var name = 'xor';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"875e4147-5491-64c1-ecc1-cd6ff33c1946","properties":{"1":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    1    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"0af4ae65-85f2-83b8-2715-d176339ea847","properties":{"1":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"0    1    0    1    1","p":{"x":810,"y":832.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    1    0    1    1"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"4ebb85d0-63ca-ac47-1803-4016d019b137","properties":{"1":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    1    1    1    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"d5e6e962-7372-4dc1-2c8b-69222a24b83c","properties":{"1":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"1    1    1    1    0","p":{"x":810,"y":900},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["1    1    1    1    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"27e8e11f-5be2-86ff-7b6d-c8cef9203c5b","properties":{"1":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    0    0    0    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"87df85de-f01f-a35d-9983-e9877342afef","properties":{"1":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"0    0    0    0    0","p":{"x":810,"y":697.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["0    0    0    0    0"],"cargs":[],"text_val":"","near_mouse":false,"size":{"w":472.5,"h":45}},{"type":"Text","guid":"83ab14da-3b73-55cb-a867-675a20c1f7df","properties":{"1":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["in"],"cargs":[{}],"text_val":" = in","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"8213b1e4-eea1-aa0c-e8ce-f20e5abc13c7","properties":{"1":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"in","p":{"x":900,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["in"],"cargs":[{}],"text_val":" = in","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"d3e46219-a847-1e65-2dfe-090d3c1019b5","properties":{"1":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["and"],"cargs":[{}],"text_val":" = function and(arg0, arg1) {\n  \"use strict\";\n  var name = 'and';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"a227f282-7c8e-fc5a-603c-f850d183b814","properties":{"1":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"and","p":{"x":1215,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["and"],"cargs":[{}],"text_val":" = function and(arg0, arg1) {\n  \"use strict\";\n  var name = 'and';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":67.5,"h":45}},{"type":"Text","guid":"4d57813f-c43a-f9d7-02c2-8f96abc06b79","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"603c2e32-2bb8-38ce-a92b-f884cb08c8de","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Shape","guid":"d6a0dd1c-3b47-2e47-0ea1-f0389fd274b7","properties":{"1":{"c":[0,0,0,1],"path":[{"x":1170,"y":585},{"x":1170,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1170,"y":585},{"x":1170,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1170,"y":585},{"x":1170,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"f543311d-862b-cc9c-cb11-557e6ba418e0","properties":{"1":{"c":[0,0,0,1],"path":[{"x":742.5,"y":641.25},{"x":1867.5,"y":641.25}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":742.5,"y":641.25},{"x":1867.5,"y":641.25}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":742.5,"y":641.25},{"x":1867.5,"y":641.25}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"a0c1fb20-45c5-6e1e-c84d-f18e73db590d","properties":{"1":{"c":[0,0,0,1],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"1e16472f-8e25-ad48-2a50-5a0450afb650","properties":{"1":{"c":[0,0,0,1],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1417.5,"y":585},{"x":1417.5,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Text","guid":"b41fa125-c38c-2c97-ed41-71ff085afe02","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Text","guid":"48359abb-262b-7ed3-f0ce-10733f7b229f","properties":{"1":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,1],"w":2,"h":2,"r":0},"2":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0},"3":{"t":"or","p":{"x":1462.5,"y":607.5},"c":[0,0,0,0],"w":2,"h":2,"r":0}},"new":false,"selected":false,"dragged":false,"cursor":0,"cursor_selection":0,"command":"","args":["or"],"cargs":[{}],"text_val":" = function or(arg0, arg1) {\n  \"use strict\";\n  var name = 'or';\n  if (test0(arg0)) { // type: number\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(arg0, arg1); // signature: number, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert0(arg0), arg1); // signature: number, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), arg1); // signature: number, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert1(arg0), convert2(arg1)); // signature: number, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert3(arg1)); // signature: number, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert4(arg1)); // signature: number, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(arg0, convert5(arg1)); // signature: number, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test1(arg0)) { // type: Complex\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(arg0, arg1); // signature: Complex, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert0(arg1)); // signature: Complex, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert6(arg1)); // signature: Complex, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert7(arg1)); // signature: Complex, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to Complex)\n      if (arguments.length === 2) {\n        return signature1(arg0, convert8(arg1)); // signature: Complex, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test2(arg0)) { // type: BigNumber\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert6(arg0), arg1); // signature: BigNumber, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(arg0, arg1); // signature: BigNumber, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert1(arg1)); // signature: BigNumber, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert2(arg1)); // signature: BigNumber, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert9(arg1)); // signature: BigNumber, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert10(arg1)); // signature: BigNumber, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(arg0, convert11(arg1)); // signature: BigNumber, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test7(arg0)) { // type: Unit\n    if (test7(arg1)) { // type: Unit\n      if (arguments.length === 2) {\n        return signature3(arg0, arg1); // signature: Unit, Unit\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test8(arg0)) { // type: Array\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature4(arg0, arg1); // signature: Array, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature5(arg0, arg1); // signature: Array, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature6(arg0, arg1); // signature: Array, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test9(arg0)) { // type: Matrix\n    if (test8(arg1)) { // type: Array\n      if (arguments.length === 2) {\n        return signature7(arg0, arg1); // signature: Matrix, Array\n      }\n    }\n    if (test9(arg1)) { // type: Matrix\n      if (arguments.length === 2) {\n        return signature8(arg0, arg1); // signature: Matrix, Matrix\n      }\n    }\n    // type: any\n    if (arguments.length === 2) {\n      return signature9(arg0, arg1); // signature: Matrix, any\n    }\n    if (arguments.length > 2) {\n      throw createError(name, arguments.length, 2, arguments[2]);\n    }\n  }\n  if (test3(arg0)) { // type: Fraction (convert to BigNumber)\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert7(arg0), arg1); // signature: Fraction, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), arg1); // signature: Fraction, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test0(arg1)) { // type: number (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert1(arg1)); // signature: Fraction, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert2(arg1)); // signature: Fraction, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert9(arg1)); // signature: Fraction, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert10(arg1)); // signature: Fraction, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert2(arg0), convert11(arg1)); // signature: Fraction, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test4(arg0)) { // type: string (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), arg1); // signature: string, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test1(arg1)) { // type: Complex\n      if (arguments.length === 2) {\n        return signature1(convert8(arg0), arg1); // signature: string, Complex\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), arg1); // signature: string, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert9(arg0), convert2(arg1)); // signature: string, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert3(arg1)); // signature: string, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert4(arg1)); // signature: string, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert3(arg0), convert5(arg1)); // signature: string, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test5(arg0)) { // type: boolean (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), arg1); // signature: boolean, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), arg1); // signature: boolean, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert10(arg0), convert2(arg1)); // signature: boolean, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert3(arg1)); // signature: boolean, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert4(arg1)); // signature: boolean, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert4(arg0), convert5(arg1)); // signature: boolean, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  if (test6(arg0)) { // type: null (convert to number)\n    if (test0(arg1)) { // type: number\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), arg1); // signature: null, number\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test2(arg1)) { // type: BigNumber\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), arg1); // signature: null, BigNumber\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test3(arg1)) { // type: Fraction (convert to BigNumber)\n      if (arguments.length === 2) {\n        return signature2(convert11(arg0), convert2(arg1)); // signature: null, Fraction\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test4(arg1)) { // type: string (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert3(arg1)); // signature: null, string\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test5(arg1)) { // type: boolean (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert4(arg1)); // signature: null, boolean\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n    if (test6(arg1)) { // type: null (convert to number)\n      if (arguments.length === 2) {\n        return signature0(convert5(arg0), convert5(arg1)); // signature: null, null\n      }\n      if (arguments.length > 2) {\n        throw createError(name, arguments.length, 2, arguments[2]);\n      }\n    }\n  }\n  // type: any\n  if (test8(arg1)) { // type: Array\n    if (arguments.length === 2) {\n      return signature10(arg0, arg1); // signature: any, Array\n    }\n  }\n  if (test9(arg1)) { // type: Matrix\n    if (arguments.length === 2) {\n      return signature11(arg0, arg1); // signature: any, Matrix\n    }\n  }\n  throw createError(name, arguments.length, 1, arguments[1], 'Array,Matrix');\n  throw createError(name, arguments.length, 0, arguments[0], 'number,Complex,BigNumber,Unit,Array,Matrix,any');\n}","near_mouse":false,"size":{"w":45,"h":45}},{"type":"Shape","guid":"4d55b080-48f5-9240-db95-ece349d55baa","properties":{"1":{"c":[0,0,0,1],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]},{"type":"Shape","guid":"7271597a-ecc1-3d7d-0c1a-4f34895592fb","properties":{"1":{"c":[0,0,0,1],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"2":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0},"3":{"c":[0,0,0,0],"path":[{"x":1620,"y":585},{"x":1620,"y":967.5}],"v":false,"w":1,"h":1,"r":0}},"selected_indices":[]}],"cam":{"default_props":{"p":{"x":1280,"y":720},"w":1,"h":1,"rxyz":[0,0,0]},"properties":{"1":{"p":{"x":1280,"y":720},"w":1,"h":1,"rxyz":[0,0,0]},"2":{"p":{"x":1561.25,"y":708.75},"w":1,"h":1,"rxyz":[2.1510571102112408e-16,-0.019999999999999383,0]},"3":{"p":{"x":1280,"y":720},"w":1,"h":1,"rxyz":[6.245004513516506e-17,-0.0799999999999997,0]},"4":{"p":{"x":1280,"y":720},"w":1,"h":1,"rxyz":[6.245004513516506e-17,-0.0799999999999997,0]},"undefined":{"p":{"x":1280,"y":720},"w":1,"h":1,"rxyz":[0,0,0]}},"ticks":[[[-10,-0.2,0],[-10,0.2,0],[-9,-0.2,0],[-9,0.2,0],[-8,-0.2,0],[-8,0.2,0],[-7,-0.2,0],[-7,0.2,0],[-6,-0.2,0],[-6,0.2,0],[-5,-0.2,0],[-5,0.2,0],[-4,-0.2,0],[-4,0.2,0],[-3,-0.2,0],[-3,0.2,0],[-2,-0.2,0],[-2,0.2,0],[-1,-0.2,0],[-1,0.2,0],[0,-0.2,0],[0,0.2,0],[1,-0.2,0],[1,0.2,0],[2,-0.2,0],[2,0.2,0],[3,-0.2,0],[3,0.2,0],[4,-0.2,0],[4,0.2,0],[5,-0.2,0],[5,0.2,0],[6,-0.2,0],[6,0.2,0],[7,-0.2,0],[7,0.2,0],[8,-0.2,0],[8,0.2,0],[9,-0.2,0],[9,0.2,0],[-0.2,-10,0],[0.2,-10,0],[-0.2,-9,0],[0.2,-9,0],[-0.2,-8,0],[0.2,-8,0],[-0.2,-7,0],[0.2,-7,0],[-0.2,-6,0],[0.2,-6,0],[-0.2,-5,0],[0.2,-5,0],[-0.2,-4,0],[0.2,-4,0],[-0.2,-3,0],[0.2,-3,0],[-0.2,-2,0],[0.2,-2,0],[-0.2,-1,0],[0.2,-1,0],[-0.2,0,0],[0.2,0,0],[-0.2,1,0],[0.2,1,0],[-0.2,2,0],[0.2,2,0],[-0.2,3,0],[0.2,3,0],[-0.2,4,0],[0.2,4,0],[-0.2,5,0],[0.2,5,0],[-0.2,6,0],[0.2,6,0],[-0.2,7,0],[0.2,7,0],[-0.2,8,0],[0.2,8,0],[-0.2,9,0],[0.2,9,0],[-0.2,0,-10],[0.2,0,-10],[-0.2,0,-9],[0.2,0,-9],[-0.2,0,-8],[0.2,0,-8],[-0.2,0,-7],[0.2,0,-7],[-0.2,0,-6],[0.2,0,-6],[-0.2,0,-5],[0.2,0,-5],[-0.2,0,-4],[0.2,0,-4],[-0.2,0,-3],[0.2,0,-3],[-0.2,0,-2],[0.2,0,-2],[-0.2,0,-1],[0.2,0,-1],[-0.2,0,0],[0.2,0,0],[-0.2,0,1],[0.2,0,1],[-0.2,0,2],[0.2,0,2],[-0.2,0,3],[0.2,0,3],[-0.2,0,4],[0.2,0,4],[-0.2,0,5],[0.2,0,5],[-0.2,0,6],[0.2,0,6],[-0.2,0,7],[0.2,0,7],[-0.2,0,8],[0.2,0,8],[-0.2,0,9],[0.2,0,9]],[[-10,-0.2,0],[-10,0.2,0],[-9,-0.2,0],[-9,0.2,0],[-8,-0.2,0],[-8,0.2,0],[-7,-0.2,0],[-7,0.2,0],[-6,-0.2,0],[-6,0.2,0],[-5,-0.2,0],[-5,0.2,0],[-4,-0.2,0],[-4,0.2,0],[-3,-0.2,0],[-3,0.2,0],[-2,-0.2,0],[-2,0.2,0],[-1,-0.2,0],[-1,0.2,0],[0,-0.2,0],[0,0.2,0],[1,-0.2,0],[1,0.2,0],[2,-0.2,0],[2,0.2,0],[3,-0.2,0],[3,0.2,0],[4,-0.2,0],[4,0.2,0],[5,-0.2,0],[5,0.2,0],[6,-0.2,0],[6,0.2,0],[7,-0.2,0],[7,0.2,0],[8,-0.2,0],[8,0.2,0],[9,-0.2,0],[9,0.2,0],[-0.2,-10,0],[0.2,-10,0],[-0.2,-9,0],[0.2,-9,0],[-0.2,-8,0],[0.2,-8,0],[-0.2,-7,0],[0.2,-7,0],[-0.2,-6,0],[0.2,-6,0],[-0.2,-5,0],[0.2,-5,0],[-0.2,-4,0],[0.2,-4,0],[-0.2,-3,0],[0.2,-3,0],[-0.2,-2,0],[0.2,-2,0],[-0.2,-1,0],[0.2,-1,0],[-0.2,0,0],[0.2,0,0],[-0.2,1,0],[0.2,1,0],[-0.2,2,0],[0.2,2,0],[-0.2,3,0],[0.2,3,0],[-0.2,4,0],[0.2,4,0],[-0.2,5,0],[0.2,5,0],[-0.2,6,0],[0.2,6,0],[-0.2,7,0],[0.2,7,0],[-0.2,8,0],[0.2,8,0],[-0.2,9,0],[0.2,9,0],[-0.2,0,-10],[0.2,0,-10],[-0.2,0,-9],[0.2,0,-9],[-0.2,0,-8],[0.2,0,-8],[-0.2,0,-7],[0.2,0,-7],[-0.2,0,-6],[0.2,0,-6],[-0.2,0,-5],[0.2,0,-5],[-0.2,0,-4],[0.2,0,-4],[-0.2,0,-3],[0.2,0,-3],[-0.2,0,-2],[0.2,0,-2],[-0.2,0,-1],[0.2,0,-1],[-0.2,0,0],[0.2,0,0],[-0.2,0,1],[0.2,0,1],[-0.2,0,2],[0.2,0,2],[-0.2,0,3],[0.2,0,3],[-0.2,0,4],[0.2,0,4],[-0.2,0,5],[0.2,0,5],[-0.2,0,6],[0.2,0,6],[-0.2,0,7],[0.2,0,7],[-0.2,0,8],[0.2,0,8],[-0.2,0,9],[0.2,0,9]],[[-10,-0.2,0],[-10,0.2,0],[-9,-0.2,0],[-9,0.2,0],[-8,-0.2,0],[-8,0.2,0],[-7,-0.2,0],[-7,0.2,0],[-6,-0.2,0],[-6,0.2,0],[-5,-0.2,0],[-5,0.2,0],[-4,-0.2,0],[-4,0.2,0],[-3,-0.2,0],[-3,0.2,0],[-2,-0.2,0],[-2,0.2,0],[-1,-0.2,0],[-1,0.2,0],[0,-0.2,0],[0,0.2,0],[1,-0.2,0],[1,0.2,0],[2,-0.2,0],[2,0.2,0],[3,-0.2,0],[3,0.2,0],[4,-0.2,0],[4,0.2,0],[5,-0.2,0],[5,0.2,0],[6,-0.2,0],[6,0.2,0],[7,-0.2,0],[7,0.2,0],[8,-0.2,0],[8,0.2,0],[9,-0.2,0],[9,0.2,0],[-0.2,-10,0],[0.2,-10,0],[-0.2,-9,0],[0.2,-9,0],[-0.2,-8,0],[0.2,-8,0],[-0.2,-7,0],[0.2,-7,0],[-0.2,-6,0],[0.2,-6,0],[-0.2,-5,0],[0.2,-5,0],[-0.2,-4,0],[0.2,-4,0],[-0.2,-3,0],[0.2,-3,0],[-0.2,-2,0],[0.2,-2,0],[-0.2,-1,0],[0.2,-1,0],[-0.2,0,0],[0.2,0,0],[-0.2,1,0],[0.2,1,0],[-0.2,2,0],[0.2,2,0],[-0.2,3,0],[0.2,3,0],[-0.2,4,0],[0.2,4,0],[-0.2,5,0],[0.2,5,0],[-0.2,6,0],[0.2,6,0],[-0.2,7,0],[0.2,7,0],[-0.2,8,0],[0.2,8,0],[-0.2,9,0],[0.2,9,0],[-0.2,0,-10],[0.2,0,-10],[-0.2,0,-9],[0.2,0,-9],[-0.2,0,-8],[0.2,0,-8],[-0.2,0,-7],[0.2,0,-7],[-0.2,0,-6],[0.2,0,-6],[-0.2,0,-5],[0.2,0,-5],[-0.2,0,-4],[0.2,0,-4],[-0.2,0,-3],[0.2,0,-3],[-0.2,0,-2],[0.2,0,-2],[-0.2,0,-1],[0.2,0,-1],[-0.2,0,0],[0.2,0,0],[-0.2,0,1],[0.2,0,1],[-0.2,0,2],[0.2,0,2],[-0.2,0,3],[0.2,0,3],[-0.2,0,4],[0.2,0,4],[-0.2,0,5],[0.2,0,5],[-0.2,0,6],[0.2,0,6],[-0.2,0,7],[0.2,0,7],[-0.2,0,8],[0.2,0,8],[-0.2,0,9],[0.2,0,9]]],"props":{"p":{"x":1280,"y":720},"w":1,"h":1,"rxyz":[0,0,0]},"R":[[1,0,0],[0,1,0],[0,0,1]]}}